services:
  backend:
    container_name: "${PROJECT_TAG:-app}-backend"
    build:
      context: ./backend
      dockerfile: Dockerfile
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - ./backend/node_modules/
            - ./backend/dist/
        - action: rebuild
          path: ./backend/package.json
          target: /app/package.json
    user: root
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "0.0.0.0:${BACKEND_PORT:-3500}:3500"
    depends_on:
      postgres:
        condition: service_started

  frontend:
    container_name: "${PROJECT_TAG:-app}-frontend"
    build:
      context: ./frontend
      dockerfile: Dockerfile
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - ./frontend/node_modules/
            - ./frontend/dist/
        - action: rebuild
          path: ./frontend/package.json
          target: /app/package.json
    user: root
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "0.0.0.0:${FRONTEND_PORT:-3000}:3000"

  frontend-old:
    container_name: "${PROJECT_TAG:-app-old}-frontend-old"
    build:
      context: ./frontend-old
      dockerfile: Dockerfile
    develop:
      watch:
        - action: sync
          path: ./frontend-old
          target: /app-old
          ignore:
            - ./frontend-old/node_modules/
            - ./frontend-old/dist/
        - action: rebuild
          path: ./frontend-old/package.json
          target: /app/package.json
    user: root
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "3000:3000"

  postgres:
    image: postgres:16-alpine
    container_name: "${PROJECT_TAG:-app}-postgres"
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432/tcp"
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'" ]
      interval: 120s
      timeout: 5s
      retries: 2
      start_period: 30s

volumes:
  postgres-data:
